# melvq.m
# David Rowe Aug 2015
#
# Experimenting with VQ design for mel LSPs

# todo:
# [ ] Sorting inside search what happens if we get a order issue, fix and calc SD
# [ ] Search to avoid a worst case error rather than average?  This could be included
#     in training.
# [ ] nested/staged search


# train up multi-stage VQ
# ~/codec2-dev/build_linux/src$ sox -r 8000 -s -2 ../../wav/all.wav -t raw -r 8000 -s -2 - sinc 300 sinc -2600 | ./c2sim - --lpc 6 --lpcpf --lspmel --dump all  -o - | play -t raw -r 8000 -s -2 - vol 3
#
# octave:> load ../build_linux/src/all_mel.txt
# octave:> melvq; vq = trainvq(all_mel, 64, 3);
# octave:> save vq
using Clustering
using HDF5


function trainvq(training_data, Nvec, stages)
    width = size(training_data)[1]
    vq = zeros(Nvec,width,stages);
    for i=1:stages
        R = kmeans(training_data, Nvec);
        centers = R.centers;
        idx = R.assignments;
        quant_error = centers[:,idx] - training_data;
        mse = mean(std(quant_error));
        print("mse stage $(i): $(mse)\n");
        training_data = quant_error;
        vq[:,:,i] = centers';
    end
    return vq;
end

function load_train_save(training_file,vec_name,vqset_file,Nvec,stages)
    training_data = h5read(training_file,vec_name)["value"];

    train_bias_end = 1;
    k = size(training_data)[2]
    bias_vec = 1:k;
    bias_vec = collect(1-((bias_vec-1) * (train_bias_end/(k-1))));
    bias_vec_inv = 1./bias_vec;
    training_data = training_data';


    for i=1:size(training_data)[2]
        training_data[:,i] = training_data[:,i] .* bias_vec;
    end
    vq = trainvq(training_data,Nvec,stages);
    print("$(size(vq))")
    for ii = 1:size(vq)[3]
        for jj = 1:size(vq)[1]
            vq[jj,:,ii] = vq[jj,:,ii] .* bias_vec_inv';
        end
    end
    h5write(vqset_file,"train_120_vq",vq);
end
